#######
#formato bancos.dat:

#1)entidad
#2)codigo_entidad
#3)descripcion_entidad
#4)ubicacion del CBU
#5)ubicacion del Saldo
#6)formato del CBU

#######

#imports
. Logger
. CsvParser

#constants
readonly ACTION_ALTA=1
readonly ACTION_REEMPLAZO=2
readonly ACTION_ANTERIOR=3
readonly ACTION_DUPLICADO=4

#functions
start_paths(){
	JOB_PATH="../../../Documents/facultad/sistemasOperativos/tp/"
	MAEDIR="maedir/"
	MAEDIR_PATH="$JOB_PATH$MAEDIR"
	ACEPDIR="acepdir/"
	BANCOS="bancos.dat"
	BANCOS_FILE="$JOB_PATH$MAEDIR$BANCOS"
	LOG_FILE="FSoldes"
	ACEPDIR_PATH="$JOB_PATH$ACEPDIR"
	SALDOS_LIS_FILE="saldos.lis"
	typeset SALDOS_TAB_FILE="saldos.tab"
	SALDOS_DIR="$MAEDIR_PATH""saldos/"
	ANT_DIR="ant/"
	SALDOS_TAB_FILE_PATH="$SALDOS_DIR$SALDOS_TAB_FILE"
}

format_bank(){
	NAME=$1
	LINEA=`grep "^$NAME" "$BANCOS_FILE"`
	FORMAT_CBU=`getLastCsvField "$LINEA"`	
	CODIGO_ENTIDAD=`getCsvFieldNumber "$LINEA" 2`
	UBIC_CBU=`getCsvFieldNumber "$LINEA" 4`
	UBIC_SALDO=`getCsvFieldNumber "$LINEA" 5`
	FORMAT_CBU=`sanitizeNumber $FORMAT_CBU`
}

processFile(){
	typeset FILE=$1	
	myLog 'processFile' 'info' "Archivo a procesar:$FILE"
	typeset BANCO=`echo $FILE | sed 's/_.*$//'`
	typeset FECHA=`echo $FILE | sed 's/^.*_//'`
	format_bank "$BANCO"
#	echo "banco:$BANCO,entidad:$CODIGO_ENTIDAD, ubic_cbu:$UBIC_CBU, ubic_saldo:$UBIC_SALDO, format_cbu:$FORMAT_CBU, fin"

	typeset ACTION=$(curseOfAction "$CODIGO_ENTIDAD" "$FECHA")
#	echo "action: $ACTION"
	if [ $ACTION -eq $ACTION_ALTA ] || [ $ACTION -eq $ACTION_REEMPLAZO ]; then
		echo "es alta o reemplazo"
	else
		echo "es duplicado o anterior"
	fi

#comentado para ejecutar mas rapido otra cosa	
#	while read LINE;
#	do
#		processLine "$LINE";
#	done < "$ACEPDIR_PATH$FILE"
	
#	updateSaldosTab "$BANCO" "$CODIGO_ENTIDAD" "$FECHA"
}

#$1:nombreEntidad,$2:codigoEntidad,$3:fechaSaldo
updateSaldosTab(){
	typeset ROW="$1;$2;$3"
	echo "$ROW" >> "$SALDOS_TAB_FILE_PATH"
}

#$1:codigoEntidad,$2:fechaSaldo
curseOfAction(){
	typeset RECORD=`grep "^[^;]*;$1;[^;]*$" "$SALDOS_TAB_FILE_PATH"`
	
	if [ "$RECORD" == "" ]; then
		echo "$ACTION_ALTA"
	else
		typeset LAST_DATE_STRING=`getLastCsvField "$RECORD"`
		LAST_DATE_STRING=`sanitizeNumber $LAST_DATE_STRING`
		typeset LAST_DATE=$(date -d "$LAST_DATE_STRING" +"%Y%m%d")
		typeset FILE_DATE=$(date -d "$2" +"%Y%m%d")
		
#		echo "FILE DATE: $FILE_DATE"
#		echo "LAST DATE: $LAST_DATE"
		
		if [ $FILE_DATE -gt $LAST_DATE ];then
			echo "$ACTION_REEMPLAZO"
		elif [ $FILE_DATE -eq $LAST_DATE ];then
			echo "$ACTION_DUPLICADO"
		else
			echo "$ACTION_ANTERIOR"
		fi
	fi

}

#por ahora solo paso como parametro LINE. Los otros datos los uso "globales". 
#si despues aparece la necesidad lo cambio
processLine(){
	typeset LINEA=$1
	typeset SALDO=`getCsvFieldNumber "$LINEA" "$UBIC_SALDO"`

	typeset CBU=`getCBU "$LINEA" "$UBIC_CBU" "$FORMAT_CBU"`
	
	if [ `isValidCbu "$CBU"` -eq 1 ]; then
		typeset ROW="$FILE;$CODIGO_ENTIDAD;$CBU;$SALDO"
		echo "$ROW" >> "$SALDOS_DIR$SALDOS_LIS_FILE"
	else
		myLog 'processLine' 'info' "Error en CBU. Registro original $LINEA"
		myLog 'processLine' 'info' 'Se rechaza el registro'
	fi
	
}


sanitizeNumber(){
	echo $1 | sed 's/[^0-9]*//g'
}

isValidCbu(){
	typeset IS_VALID=$(echo "$1" | grep '^\([0-9]\)\{22\}$')
	
	if [ "$IS_VALID" != "" ];then
		echo 1
	else
		echo 0
	fi
}

#$1:linea,$2:ubic_cbu,$3:formato_cbu
getCBU(){
	typeset LINEA=$1
	typeset FORMAT=$3
	typeset FIRST_FIELD=$2
	typeset CBU=""
	
	typeset i=0
	while [ $i -lt $FORMAT ]
	do
		typeset FIELD_NUMBER=`expr $FIRST_FIELD + $i`
		typeset VALUE=`getCsvFieldNumber "$LINEA" "$FIELD_NUMBER"`
		CBU="$CBU$VALUE"
		i=`expr $i + 1`
	done
	echo -n "$CBU"
}

processAllFiles(){
	typeset FILES=`ls "$ACEPDIR_PATH"`
#	savePrevious	
	for FILE_ITEM in $FILES;
	do
		processFile "$FILE_ITEM"
	done
}

#savePrevious(){
#	./mover.sh "$SALDOS_DIR$SALDOS_LIS_FILE" "$SALDOS_DIR$ANT_DIR"
#}

myLog(){
	typeset WHERE=$1
	typeset CODE=$2
	typeset DESCRIPTION=$3
	log "$LOG_FILE" "$WHERE" "$CODE" "$DESCRIPTION"
}

# codigo de ejecucion
start_paths
myLog 'fsoldes' 'info' 'Inicio de FSoldes'
processAllFiles
