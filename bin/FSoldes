#!/bin/bash
#######
#formato bancos.dat:

#1)entidad
#2)codigo_entidad
#3)descripcion_entidad
#4)ubicacion del CBU
#5)ubicacion del Saldo
#6)formato del CBU

#######

#imports
. Logger
. CsvParser
. utilidadArchivo

#constants
readonly K_ACTION_ALTA=1
readonly K_ACTION_REEMPLAZO=2
readonly K_ACTION_ANTERIOR=3
readonly K_ACTION_DUPLICADO=4

readonly K_REC_REJECTED=0
readonly K_REC_ACCEPTED=1

#functions
start_paths(){
	JOB_PATH="../../../Documents/facultad/sistemasOperativos/tp/"
	MAEDIR="maedir/"
	MAEDIR_PATH="$JOB_PATH$MAEDIR"
	ACEPDIR="acepdir/"
	BANCOS="bancos.dat"
	BANCOS_FILE="$JOB_PATH$MAEDIR$BANCOS"
	local LOG_DIR="logdir/"
	local LOG_FILE_NAME="FSoldes"
	LOG_FILE="$LOG_DIR$LOG_FILE_NAME"
	ACEPDIR_PATH="$JOB_PATH$ACEPDIR"
	PROCDIR="$ACEPDIR_PATH""proc/"
	RECHDIR="$JOB_PATH""rech/"
	SALDOS_LIS_FILE="saldos.lis"
	SALDOS_TAB_FILE="saldos.tab"
	SALDOS_DIR="$MAEDIR_PATH""saldos/"
	SALDOS_TAB_FILE_PATH="$SALDOS_DIR$SALDOS_TAB_FILE"
	SALDOS_LIS_FILE_PATH="$SALDOS_DIR$SALDOS_LIS_FILE"
}

format_bank(){
	NAME=$1
	LINEA=`grep "^$NAME" "$BANCOS_FILE"`
	FORMAT_CBU=`getLastCsvField "$LINEA"`	
	CODIGO_ENTIDAD=`getCsvFieldNumber "$LINEA" 2`
	UBIC_CBU=`getCsvFieldNumber "$LINEA" 4`
	UBIC_SALDO=`getCsvFieldNumber "$LINEA" 5`
	FORMAT_CBU=`sanitizeNumber $FORMAT_CBU`
}

#$1:file
processFile(){
	typeset FILE=$1	
	echo "archivo a procesar: $ACEPDIR_PATH$FILE"
	myLog 'processFile' 'info' "Archivo a procesar:$FILE"
	typeset BANCO=`echo $FILE | sed 's/_.*$//'`
	typeset FECHA=`echo $FILE | sed 's/^.*_//'`
	
	format_bank "$BANCO"

	typeset ACTION=$(curseOfAction "$CODIGO_ENTIDAD" "$FECHA")
	if [ $ACTION -eq $K_ACTION_ALTA ] || [ $ACTION -eq $K_ACTION_REEMPLAZO ]; then
		processValidFile "$ACTION" "$FILE" "$BANCO" "$FECHA"
	elif [ $ACTION -eq $K_ACTION_ANTERIOR ]; then
		echo "es anterior"
		myLog 'processFile' 'info' "Fecha del Archivo anterior a la existente. Se rechaza el archivo"
		moveRejectedFile "$FILE"
	else
		echo "es duplicado"
		myLog 'processFile' 'info' "Archivo duplicado. Se rechaza el archivo"
		moveRejectedFile "$FILE"
	fi
}

#$1:action,$2:file,$3:banco,$4:fecha
processValidFile(){
	typeset ACTION=$1
	typeset FILE=$2
	typeset BANCO=$3
	typeset FECHA=$4
	typeset DELETED_RECORDS=0
	
	backupSaldos
	
	if [ $ACTION -eq $K_ACTION_REEMPLAZO ]; then
		typeset DELETE_PATTERN="^[^;]*;$CODIGO_ENTIDAD;[^;]*;[^;]*$"
		DELETED_RECORDS=$(grep -c "$DELETE_PATTERN" "$SALDOS_LIS_FILE_PATH")
		if [ $DELETED_RECORDS -gt 0 ]; then
			sed -i "/$DELETE_PATTERN/d" "$SALDOS_LIS_FILE_PATH"
		fi
	fi
	
	typeset READ_RECORDS=0
	typeset ACCEPTED_RECORDS=0
	typeset REJECTED_RECORDS=0
	
	while read LINE; do
		READ_RECORDS=`expr $READ_RECORDS + 1`
		typeset RESULT=$(processLine "$LINE")
		if [ $RESULT -eq $K_REC_ACCEPTED ]; then
			ACCEPTED_RECORDS=`expr $ACCEPTED_RECORDS + 1`
		else
			REJECTED_RECORDS=`expr $REJECTED_RECORDS + 1`
		fi;
	done < "$ACEPDIR_PATH$FILE"
	
	myLog 'processValidFile' 'info' "Registro eliminados: $DELETED_RECORDS"
	myLog 'processValidFile' 'info' "Registro leidos: $READ_RECORDS"
	myLog 'processValidFile' 'info' "Registro aceptados: $ACCEPTED_RECORDS"
	myLog 'processValidFile' 'info' "Registro rechazados: $REJECTED_RECORDS"
	
	#moveProcessedFile "$ACEPDIR_PATH$FILE"
	moveProcessedFile "$FILE"
	
	updateSaldosTab "$BANCO" "$CODIGO_ENTIDAD" "$FECHA"
}

#$1:fileName
moveProcessedFile(){
	mover "$LOG_FILE" "moveProcessedFile" "proc" "$1" "$ACEPDIR_PATH" "$PROCDIR"
}

#1)fileName
moveRejectedFile(){
	mover "$LOG_FILE" "moveRejectedFileFile" "rech" "$1" "$ACEPDIR_PATH" "$RECHDIR"
}

#$1:nombreEntidad,$2:codigoEntidad,$3:fechaSaldo
updateSaldosTab(){
	if [[ -f $SALDOS_TAB_FILE_PATH ]]; then
		sed -i "/^[^;]*;$2;[^;]*$/d" "$SALDOS_TAB_FILE_PATH"
	fi
	typeset ROW="$1;$2;$3"
	echo "$ROW" >> "$SALDOS_TAB_FILE_PATH"
}

backupSaldos(){
	local ORIGEN="$SALDOS_DIR"
	local DESTINO="$SALDOS_DIR""ant/"

	if [ -f $SALDOS_TAB_FILE_PATH ]; then
		copiar "$LOG_FILE" "backupSaldos" "ant" "$SALDOS_TAB_FILE" "$ORIGEN" "$DESTINO"
	fi
	
	if [ -f $SALDOS_LIS_FILE_PATH ]; then
		copiar "$LOG_FILE" "backupSaldos" "ant" "$SALDOS_LIS_FILE" "$ORIGEN" "$DESTINO"
	fi
}

#$1:codigoEntidad,$2:fechaSaldo
curseOfAction(){
	if [ -f $SALDOS_TAB_FILE_PATH ]; then
		typeset RECORD=`grep "^[^;]*;$1;[^;]*$" "$SALDOS_TAB_FILE_PATH"`
		if [ "$RECORD" == "" ]; then
			echo "$K_ACTION_ALTA"
		else
			typeset LAST_DATE_STRING=`getLastCsvField "$RECORD"`
			LAST_DATE_STRING=`sanitizeNumber $LAST_DATE_STRING`
			typeset LAST_DATE=$(date -d "$LAST_DATE_STRING" +"%Y%m%d")
			typeset FILE_DATE=$(date -d "$2" +"%Y%m%d")
		
			if [ $FILE_DATE -gt $LAST_DATE ];then
				echo "$K_ACTION_REEMPLAZO"
			elif [ $FILE_DATE -eq $LAST_DATE ];then
				echo "$K_ACTION_DUPLICADO"
			else
				echo "$K_ACTION_ANTERIOR"
			fi
		fi
	else
		echo "$K_ACTION_ALTA"
	fi
}

#por ahora solo paso como parametro LINE. Los otros datos los uso "globales". 
#si despues aparece la necesidad lo cambio
processLine(){
	typeset LINEA=$1
	typeset SALDO=`getCsvFieldNumber "$LINEA" "$UBIC_SALDO"`

	typeset CBU=`getCBU "$LINEA" "$UBIC_CBU" "$FORMAT_CBU"`
	
	if [ `isValidCbu "$CBU"` -eq 1 ]; then
		typeset ROW="$FILE;$CODIGO_ENTIDAD;$CBU;$SALDO"
		echo "$ROW" >> "$SALDOS_LIS_FILE_PATH"
		echo "$K_REC_ACCEPTED"
	else
		myLog 'processLine' 'info' "Error en CBU. Registro original $LINEA"
		myLog 'processLine' 'info' 'Se rechaza el registro'
		echo "$K_REC_REJECTED"
	fi
	
}


sanitizeNumber(){
	echo $1 | sed 's/[^0-9]*//g'
}

isValidCbu(){
	typeset IS_VALID=$(echo "$1" | grep '^\([0-9]\)\{22\}$')
	
	if [ "$IS_VALID" != "" ];then
		echo 1
	else
		echo 0
	fi
}

#$1:linea,$2:ubic_cbu,$3:formato_cbu
getCBU(){
	typeset LINEA=$1
	typeset FORMAT=$3
	typeset FIRST_FIELD=$2
	typeset CBU=""
	
	typeset i=0
	while [ $i -lt $FORMAT ]
	do
		typeset FIELD_NUMBER=`expr $FIRST_FIELD + $i`
		typeset VALUE=`getCsvFieldNumber "$LINEA" "$FIELD_NUMBER"`
		CBU="$CBU$VALUE"
		i=`expr $i + 1`
	done
	echo -n "$CBU"
}

processAllFiles(){
	typeset FILES=`ls -B "$ACEPDIR_PATH"` #ignora archivos con ~
	for FILE_ITEM in $FILES;
	do
		#evitar procesar carpetas
		if [[ -f $ACEPDIR_PATH$FILE_ITEM ]]; then
			processFile "$FILE_ITEM"
		fi
	done
}

myLog(){
	typeset WHERE=$1
	typeset CODE=$2
	typeset DESCRIPTION=$3
	log "$LOG_FILE" "$WHERE" "$CODE" "$DESCRIPTION"
}

# codigo de ejecucion
start_paths
myLog 'fsoldes' 'info' 'Inicio de FSoldes'
processAllFiles
myLog 'fsoldes' 'info' 'Fin de FSoldes'
